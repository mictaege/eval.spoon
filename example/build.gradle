apply plugin: 'java'
apply plugin: 'spoon'
apply plugin: 'application'
apply plugin: 'idea'

group 'com.github.mictaege.eval'
archivesBaseName = project.name
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath group: 'com.github.mictaege', name: 'spoon-gradle-plugin', version:'1.5'
        classpath group: 'org.eclipse.tycho', name: 'org.eclipse.jdt.core', version: '3.13.50.v20171007-0855'
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    model {
        java {
            srcDir 'src/model/java'
        }
        resources {
            srcDir 'src/model/resources'
        }
    }
    modelTest {
        compileClasspath += model.runtimeClasspath
        runtimeClasspath += model.runtimeClasspath
        java {
            srcDir 'src/modelTest/java '
        }
        resources {
            srcDir 'src/modelTest/resources'
        }
    }
    beans {
        compileClasspath += model.runtimeClasspath
        runtimeClasspath += model.runtimeClasspath
        java {
            srcDir 'src/beans/java'
        }
        resources {
            srcDir 'src/beans/resources'
        }
    }
    beansTest {
        compileClasspath += beans.runtimeClasspath + modelTest.runtimeClasspath
        runtimeClasspath += beans.runtimeClasspath + modelTest.runtimeClasspath
        java {
            srcDir 'src/beansTest/java'
        }
        resources {
            srcDir 'src/beansTest/resources'
        }
    }
    ui {
        compileClasspath += beans.runtimeClasspath
        runtimeClasspath += beans.runtimeClasspath
        java {
            srcDir 'src/ui/java'
        }
        resources {
            srcDir 'src/ui/resources'
        }
    }
    uiTest {
        compileClasspath += ui.runtimeClasspath + beansTest.runtimeClasspath
        runtimeClasspath += ui.runtimeClasspath + beansTest.runtimeClasspath
        java {
            srcDir 'src/uiTest/java'
        }
        resources {
            srcDir 'src/uiTest/resources'
        }
    }
    main {
        compileClasspath += ui.runtimeClasspath
        runtimeClasspath += ui.runtimeClasspath
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
    test {
        compileClasspath += main.runtimeClasspath + uiTest.runtimeClasspath
        runtimeClasspath += main.runtimeClasspath + uiTest.runtimeClasspath
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}

tasks.compileJava.dependsOn tasks.compileUiJava
tasks.compileUiJava.dependsOn tasks.compileBeansJava
tasks.compileBeansJava.dependsOn tasks.compileModelJava

tasks.compileTestJava.dependsOn tasks.compileUiTestJava
tasks.compileUiTestJava.dependsOn tasks.compileBeansTestJava
tasks.compileBeansTestJava.dependsOn tasks.compileModelTestJava

dependencies {
    modelCompile ('com.github.mictaege.eval:eval.spoon.processing:1.0-SNAPSHOT') {
        exclude group: "fr.inria.gforge.spoon", module : "spoon-core"
    }
    modelCompile "de.jensd:fontawesomefx:8.9"
    modelTestCompile "junit:junit:4.12"
    modelTestCompile "org.mockito:mockito-core:2.2.11"
}

idea {
    module {
        inheritOutputDirs = false
        testSourceDirs += file('modelTest')
        testSourceDirs += file('beansTest')
        testSourceDirs += file('uiTest')
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

spoon {

    processors = [
                    'com.github.mictaege.eval.spoon.processing.AlterClassProcessor',
                    'com.github.mictaege.eval.spoon.processing.ForkMethodProcessor',
                    'com.github.mictaege.eval.spoon.processing.OnlyIfClassProcessor',
                    'com.github.mictaege.eval.spoon.processing.OnlyIfFieldProcessor',
                    'com.github.mictaege.eval.spoon.processing.OnlyIfMethodProcessor',
                    'com.github.mictaege.eval.spoon.processing.OnlyIfConstructorProcessor'
                ]

    exclude = ['main', 'test']
    compliance = 8
    fileFilter = { File src -> src.text.contains("com.github.mictaege.eval.spoon.processing.Variant") }
}

mainClassName = "com.github.mictaege.eval.spoon.example.TowerControlMain"

jar {
    from sourceSets.model.output
    from sourceSets.beans.output
    from sourceSets.ui.output
    from sourceSets.main.output
}

run {
    classpath sourceSets.main.runtimeClasspath
}

task noVariant() {
    doLast{
        def file = new File("gradle.properties")
        if(file.exists()) {
            file.delete()
        }
    }
}

task variantEsa() {
    doLast{
        def file = new File("gradle.properties")
        if(!file.exists()) {
            file.createNewFile()
        }
        file.text = "systemProp.variant=ESA"
    }
}

task variantNasa() {
    doLast {
        def file = new File("gradle.properties")
        if(!file.exists()) {
            file.createNewFile()
        }
        file.text = "systemProp.variant=NASA"
    }

}

task variantRoskosmos() {
    doLast {
        def file = new File("gradle.properties")
        if(!file.exists()) {
            file.createNewFile()
        }
        file.text = "systemProp.variant=ROSKOSMOS"
    }
}